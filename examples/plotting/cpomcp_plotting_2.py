import numpy as np
from csle_common.metastore.metastore_facade import MetastoreFacade
from csle_common.dao.training.experiment_result import ExperimentResult
from csle_common.util.plotting_util import PlottingUtil

if __name__ == '__main__':
    execution_0_06_2 = MetastoreFacade.get_experiment_execution(id=12)
    execution_0_06 = MetastoreFacade.get_experiment_execution(id=11)
    execution_0_12 = MetastoreFacade.get_experiment_execution(id=10)
    execution_0_12_2 = MetastoreFacade.get_experiment_execution(id=13)
    execution_0_24 = MetastoreFacade.get_experiment_execution(id=9)
    execution_0_24_2 = MetastoreFacade.get_experiment_execution(id=14)
    execution_0_47 = MetastoreFacade.get_experiment_execution(id=8)
    execution_0_47_2 = MetastoreFacade.get_experiment_execution(id=15)
    execution_0_93 = MetastoreFacade.get_experiment_execution(id=2)
    execution_0_93_2 = MetastoreFacade.get_experiment_execution(id=16)
    execution_1_875 = MetastoreFacade.get_experiment_execution(id=3)
    execution_1_875_2 = MetastoreFacade.get_experiment_execution(id=17)
    execution_3_75 = MetastoreFacade.get_experiment_execution(id=4)
    execution_3_75_2 = MetastoreFacade.get_experiment_execution(id=19)
    execution_7_5 = MetastoreFacade.get_experiment_execution(id=5)
    execution_15 = MetastoreFacade.get_experiment_execution(id=6)
    execution_30 = MetastoreFacade.get_experiment_execution(id=7)

    execution = execution_15
    confidence = 0.95

    print(execution.result.all_metrics.keys())
    seeds = list(execution.result.all_metrics.keys())
    values = []
    for seed in seeds:
        if len(execution.result.all_metrics[seed]["running_average_return"]) > 0:
            values.append(execution.result.all_metrics[seed]["running_average_return"][-1])

    mean = PlottingUtil.mean_confidence_interval(data=values, confidence=confidence)[0]
    ci = PlottingUtil.mean_confidence_interval(data=values, confidence=confidence)[1]
    print(values)
    print(mean)
    print(ci)
    print(f"{mean} {mean-ci} {mean+ci}")

    values = [16.532999999999998, 7.325999999999999, 5.382, 3.2269999999999994, 2.668, 2.195, 1.8399999999999999,
              1.82125, 1.79125, 1.74125]
    cis = [3, 2, 1.7, 1, 1, 0.6, 0.3, 0.1, 0.08, 0.05]
    planning_times = [0.05859375, 0.1171875, 0.234375, 0.46875, 0.9375, 1.875, 3.75, 7.5, 15, 30]
    opt = 1.74
    print("start")

    for i in range(len(values)):
        regret = sum(values[0:i+1]) - opt*(i+1)
        ci = sum(cis[0:i])
        p = planning_times[i]/60
        print(f"{p} {regret} {regret-ci} {regret + ci}")

    runtimes = [0.8371999999999999, 1.6413, 2.4451000000000005, 3.2505, 4.0541, 4.8578, 5.662999999999999, 6.4691, 7.274199999999999, 8.0802, 8.8839, 9.6874, 10.491499999999998, 11.296699999999998, 12.099300000000001, 12.903899999999998, 13.7095, 14.515899999999998, 15.3184, 16.121199999999998, 16.924100000000003, 17.727899999999998, 18.5313, 19.3342, 20.1376, 20.941599999999998, 21.744400000000002, 22.549799999999998, 23.3563, 24.164399999999997, 24.9694, 25.7754, 26.579700000000003, 27.3861, 28.1898, 28.995300000000004, 29.801, 30.6051, 31.410899999999998, 32.2158, 33.019099999999995, 33.824200000000005, 34.630100000000006, 35.4358, 36.2404, 37.04560000000001, 37.85, 38.653000000000006, 39.4593, 40.2635, 41.07000000000001, 41.8756, 42.6789, 43.4851, 44.271800000000006, 45.056, 45.8403, 46.6263, 47.412600000000005, 48.1985, 48.98480000000001, 49.7717, 50.557399999999994, 51.3442, 52.12949999999999, 52.9165, 53.702999999999996, 54.488699999999994, 55.2755, 56.0619, 56.848, 57.6371, 58.42530000000001, 59.21329999999999, 59.99960000000001, 60.7866, 61.574299999999994, 62.362, 63.14829999999999, 63.9341, 64.71990000000001, 65.508, 66.2942, 67.07939999999999, 67.867, 68.6523, 69.4393, 70.2268, 71.0143, 71.8006, 72.58970000000001, 73.3798, 74.17430000000002, 74.96849999999999, 75.76199999999999, 76.5552, 77.34889999999999, 78.1433, 78.93999999999998, 79.73530000000001, 80.5289, 81.32419999999999, 82.11779999999999, 82.91, 83.7031, 84.50019999999999, 85.2953, 86.09009999999999, 86.8848, 87.6799, 88.47569999999999, 89.2704, 90.06800000000001, 90.8622, 91.6564, 92.4511, 93.2447, 94.03899999999999, 94.8327, 95.6286, 96.42370000000001, 97.21610000000001, 98.0095, 98.8068, 99.6047, 100.4003, 101.19539999999999, 101.9931, 102.78899999999999, 103.58349999999999, 104.37730000000002, 105.1645, 105.94089999999998, 106.7142, 107.4887, 108.26329999999999, 109.04079999999999, 109.8167, 110.59100000000001, 111.36599999999999, 112.1394, 112.9123, 113.6851, 114.4582, 115.2329, 116.00699999999999, 116.78029999999998, 117.5529, 118.32649999999998, 119.1002, 119.87359999999998, 120.6473, 121.41980000000001, 122.19279999999999, 122.98310000000001, 123.77430000000001, 124.5645, 125.35530000000001, 126.1466, 126.93770000000002, 127.72769999999998, 128.5174, 129.3075, 130.0955, 130.887, 131.67979999999997, 132.4536, 133.22999999999996, 134.0031, 134.7782, 135.55309999999997, 136.32760000000002, 137.10129999999998, 137.87230000000002, 138.6447, 139.41930000000002, 140.195, 140.97019999999998, 141.7454, 142.5192, 143.29059999999998, 144.0635, 144.83829999999998, 145.6127, 146.38639999999998, 147.1606, 147.9349, 148.7079, 149.4824, 150.2575, 151.0304, 151.80419999999998, 152.57659999999998, 153.35020000000003, 154.1249, 154.9009, 155.6755, 156.45369999999997, 157.2286, 158.004, 158.77459999999996, 159.5445, 160.315, 161.0854, 161.85610000000003, 162.62699999999998, 163.39849999999998, 164.16709999999998, 164.9371, 165.70850000000002, 166.4789, 167.2508, 168.0221, 168.79739999999998, 169.56990000000002, 170.3423, 171.11630000000002, 171.887, 172.6572]
    for r in runtimes:
        print(f"{r} 27.12474999999999 27.12474999999999 27.12474999999999")

    # for p in planning_times:
    #     print(p/60)
